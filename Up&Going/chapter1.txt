#Conditionals

to make a decision, you need to first consult the state.

different ways to express conditionals

1) if-statement ("If this condition is true, do the following...")

ex.
var bank_balance = 302.13;
var amount = 99.99;

if (amount < bank_balance) {
	console.log( "I want to buy this phone!" );
}

if statement requires a boolean expression in between parentheses.

you can provide an alternative if the condition isn't true, called else clause

ex.
const ACCESSORY_PRICE = 9.99;

var bank_balance = 302.13;
var amount = 99.99;

amount = amount * 2;

// can we afford the extra purchase?
if ( amount < bank_balance ) {
	console.log( "I'll take the accessory!" );
	amount = amount + ACCESSORY_PRICE;
}
// otherwise:
else {
	console.log( "No, thanks." );
}

values that aren't already of an expected type are often coerced to that type.
pass something other than boolean into the if-statement's condition, it will
be coerced into boolean.

coerced "falsy" : 0, "",
coerced "truthy" : anything other than "falsy"

2) switch statmement

switch statment can be used as a shorthand for series of if-else statements

3) Loops

Loops use conditionals to either keep going or stop.

//----------------------------------------------------------------------------//

#Loops

repeating a set of actions that are in {} until a certain condition fails
in other words, repeating only when the condition holds.

loops can take different forms but satisfies this basic behavior

a loop includes a test condition, as well as a block.
each time the block executes, that's called an iteration.

while vs do while

the only difference is whether the first iteration is ran after checking the
conditions or not.

do while:                 while
                        check condition  <--- only difference
1st iteration           1st iteration
check condition         check condition
2nd iteration           2nd iteration
...                     ...

if the condition is false to begin with, do while will run once, but while will
not run

Sometimes you are looping for the intended purpose of counting a certain set of
numbers, like from 0 to 9 (ten numbers). You can do that by setting a loop
iteration variable like i at value 0 and incrementing it by 1 each iteration.

programming languages almost always count from 0.

The conditional is tested on each iteration, much as if there is an implied if
statement inside the loop.

you can break out of a loop with break statement.

ex.
var i = 0;

// a `while..true` loop would run forever, right?
while (true) {
	// stop the loop?
	if ((i <= 9) === false) {
		break;
	}

	console.log( i );
	i = i + 1;
}
// 0 1 2 3 4 5 6 7 8 9

ex.
for (var i = 0; i <= 9; i = i + 1) {
	console.log( i );
}
// 0 1 2 3 4 5 6 7 8 9

for loop has initialization clause, conditional test clause, and update clause.

The "loop until a condition fails" concept holds no matter what the form of the
loop.

//----------------------------------------------------------------------------//
